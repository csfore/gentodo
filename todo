#!/usr/bin/env python
# (c) 2023 Christopher Fore
# This code is licensed under the GPLv3 license (see LICENSE for details)

import json
import os
import argparse

STORAGE_DIR = os.path.expanduser("~/.local/share/todo")
TODO_FILE = os.path.join(STORAGE_DIR, "todo.json")

def show_todo():
    with open(TODO_FILE, "r") as todo:
        data = json.load(todo)
    
    if args.verbose:    
        print("ID\tItem")
        print("==\t====")
        for key in data:
            print(f"{key}\t{data[key]}")
    else:
        print("Title\tDetails")
        for key in data:
            print(f"{data[key]['title']}\t{data[key]['details']}")

def add_item():
    if os.path.exists(TODO_FILE) and os.path.getsize(TODO_FILE) > 0:
        with open(TODO_FILE, "r") as todo:
            data = json.load(todo)
            newest_id = int(list(data.keys())[-1])
    else:
        data = {}
        newest_id = 0
    
    data[newest_id + 1] = { 
        "title": args.title,
        "details": args.details
    }

    with open(TODO_FILE, 'w') as todo:
        json.dump(data, todo, indent=4)
    print(f"Added: {args.title} | {args.details}")

def rm_item():
    if os.path.exists(TODO_FILE) and os.path.getsize(TODO_FILE) > 0:
        with open(TODO_FILE, "r") as todo:
            data = json.load(todo)
            data.pop("{0}".format(args.id))

        with open(TODO_FILE, "w") as todo:
            json.dump(data, todo, indent=4)

def item_count():
    with open(TODO_FILE, "r") as todo:
        data = json.load(todo)
        
    remaining = len(data.keys())
    print(f"Items remaining: {remaining}")

def setup_parser():
    parser = argparse.ArgumentParser(usage="todo <command> [-h]")
    parser.set_defaults(func=show_todo)
    parser.add_argument('--version', action='version', version='0.0.1')
    parser.add_argument('-v', '--verbose', action='store_true',help="Be descriptive about output (i.e. show item IDs)")
    subparsers = parser.add_subparsers(help='sub-command help', metavar='')
    
    add_parser = subparsers.add_parser('add', help="Add an item to your todo list", usage="todo add [-h] -t <title> -d <details>")
    add_parser.add_argument('-t', '--title', help="Item to add to your todo list")
    add_parser.add_argument('-d', '--details', help="Add some information to your item")
    add_parser.set_defaults(func=add_item)
    

    rm_parser = subparsers.add_parser('rm', help="Remove an item from your todo list", usage="todo rm <id>")
    rm_parser.add_argument('id', help="ID to remove from your todo list")
    rm_parser.set_defaults(func=rm_item)

    count_parser = subparsers.add_parser('count', help="Shows your remaining item count")
    count_parser.set_defaults(func=item_count)

    #parser.add_argument('-a', '--add', type=str)
    #parser.add_argument('-r', '--remove', type=str)
    return parser

def print_subparser_help(parser):
    for action in parser._actions:
        if isinstance(action, argparse._SubParsersAction):
            for choice, subparser in action.choices.items():
                print(f"Help for '{choice}' subcommand:")
                subparser.print_help()
                print("\n")

def main():
    if not os.path.isdir(STORAGE_DIR):
        print("Storage does not exist")
        os.makedirs(STORAGE_DIR)
    

if __name__ == "__main__":
    parser = setup_parser()
    args = parser.parse_args()
    if 'func' not in args:
        print_subparser_help(parser)
    else:
        args.func()
    #print(args)
    main()
